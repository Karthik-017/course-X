generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  firstName   String     @map("first_name")
  lastName    String     @map("last_name")
  email       String     @unique
  password    String
  phone       String?
  bio         String?
  username    String?    @unique
  occupation  String?
  displayName String?    @map("display_name")
  avatarUrl   String?    @map("avatar_url")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  purchases   Purchase[]
  courseProgress  CourseProgress[]
  socialLinks Json?
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  courses   Course[] @relation("AdminCourses")
}

model Course {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
  price       Float
  creatorId   Int
  creator     Admin      @relation("AdminCourses", fields: [creatorId], references: [id])
  purchases   Purchase[]
  sections    Section[] 
  courseProgress  CourseProgress[]
  createdAt   DateTime  @default(now()) // This relation needs to be migrated
}

model Section {
  id        Int       @id @default(autoincrement())
  title     String
  order     Int       
  courseId  Int
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  contents  Content[] 
}

model Content {
  id        Int       @id @default(autoincrement())
  title     String
  type      String    // e.g., "video", "text", "quiz"
  url       String?   // URL for videos
  text      String?   // For text content
  duration  Int?      // Duration in minutes for videos
  order     Int       // To maintain content order within a section
  sectionId Int
  section   Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model Purchase {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int
}

model CourseProgress {
  id                  Int      @id @default(autoincrement())
  userId              Int
  courseId            Int
  completed           Boolean  @default(false)
  completedPercentage Float    @default(0)
  updatedAt           DateTime @updatedAt
  createdAt           DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId]) // Ensure one progress record per user per course
}